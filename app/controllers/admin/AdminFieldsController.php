<?php
/*
 * Plugin Name: HaloSocial
 * Plugin URL: https://halo.social
 * Description: Social Networking Plugin for WordPress
 * Author: HaloSocial
 * Author URL: https://halo.social
 * Version: 1.0
 * Copyright: (c) 2015 HaloSocial, Inc. All Rights Reserved.
 * License: GPLv3 or later
 * License URL: http://www.gnu.org/licenses/gpl-3.0.html
 * Text Domain: halosocial
 * Domain Path: /language
 *
 * HaloSocial is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * HaloSocial is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY. See the
 * GNU General Public License for more details.
 */

class AdminFieldsController extends AdminController
{

    /**
     * Inject the models.
     * @param HALOFieldModel $field
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Show a list of all the fields.
     *
     * @return View
     */
    public function getIndex()
    {
        // Title
        $title = __halotext('Field Management');

		// Toolbar
		if(HALOAuth::can('feature.profile')){
			HALOToolbar::addToolbar('Add Field','halo-btn-success','','halo.field.showEditFieldForm(0)','plus');
			HALOToolbar::addToolbar('Delete Field','halo-btn-danger','',"halo.popup.confirmDelete('Delete Field Confirm','Are you sure to delete this field','halo.field.deleteSelectedField()')",'times');
		} else {
			HALOUtilHelper::getVersionToolbar();
		}
		
        // Grab all the fields
        $fields = new HALOFieldModel();
		$fields = HALOPagination::getData($fields);

        // Show the page
        return View::make('admin/fields/index', compact('fields', 'title'));
    }

	public function ajaxGetFieldConfig($fieldType){
		$builder = HALOUIBuilder::getInstance('','grid.wrapper',array(''))
							->addUI('field_config@array',HALOField::getInstance($fieldType)->getConfigUI());
		$content = $builder->fetch();
		HALOResponse::addScriptCall('halo.field.setFieldConfig', $content );

		//hide/show tooltip for a specific fields
		if(HALOFieldModel::isReadOnlyField($fieldType)) {
			HALOResponse::addScriptCall('halo.field.setReadOnlyMode', 1 );
		} else {
			HALOResponse::addScriptCall('halo.field.setReadOnlyMode', 0 );		
		}
		
		return HALOResponse::sendResponse();
	}
	
	public function ajaxShowEditFieldForm($fieldId=0){
		
		//form content
		$field = HALOFieldModel::find($fieldId);
		if(is_null($field)){
			$field = new HALOFieldModel();
			//setup default values
			$field->published = 1;
			$field->required = 0;
		}
		$options = HALOField::getCustomFieldList();
		$options = array_merge(array(HALOObject::getInstance(array('value'=>'','title'=>'-- Select Type --'))),
								$options
								);

								
		$canEditFieldCode = in_array($field->type, array())?'disabled':'' ;
		$toolTipUI = in_array($field->type, array('tab', 'separator'))?'form.hidden':'form.textarea';
		
		$builder = HALOUIBuilder::getInstance('editField','form.edit_field',array('name'=>'popupForm'))
					->addUI('name', HALOUIBuilder::getInstance('','form.text',array('name'=>'name','title'=>'Name','placeholder'=>'Field Name','value'=>$field->name)))
					->addUI('type', HALOUIBuilder::getInstance('','form.select',array('name'=>'type',
																							'title'=>'Field Type',
																							'helptext'=>__halotext("Configure field type. Each field type will have different display layout. You can also edit format."),
																							'value'=>$field->type,
																							'onChange'=>"halo.field.getFieldConfig(this.value);",
																							'options'=>$options
																							)
																	)
					)
					->addUI('fieldcode', HALOUIBuilder::getInstance('','form.text',array('name'=>'fieldcode','title'=>'Field Code','helptext'=>__halotext('Configure field code for this field. If not configured, a default field code will be generated by using the field ID.'),'placeholder'=>'Field Code','value'=>$field->getFieldCode(),'disabled'=>$canEditFieldCode)))
					->addUI('tooltip', HALOUIBuilder::getInstance('',$toolTipUI,array('name'=>'tips','title'=>'Tooltip','placeholder'=>'Tooltip will be shown as a help icon next to the field title','value'=>$field->tips)))
					->addUI('config', HALOUIBuilder::getInstance('','grid.wrapper',array(''))
															->addUI('field_config@array',$field->toHALOField()->getConfigUI()));
		$content = 	$builder->fetch();
		$actionSave = HALOPopupHelper::getAction(array("name"=>"Save","onclick"=>"halo.field.saveField('".$fieldId."')","icon"=>"check"));
		$title = ($fieldId == 0)?"Add New Field":"Edit Field";
		HALOResponse::addScriptCall('halo.popup.setFormTitle', $title )
					->addScriptCall('halo.popup.setFormContent', $content )
					->addScriptCall('halo.popup.addFormAction', $actionSave )
					->addScriptCall('halo.popup.addFormActionCancel')
					->addScriptCall('halo.popup.showForm' );
		return HALOResponse::sendResponse();

	}

	public function ajaxSaveField($fieldId, $postData){
		//form content
		$field = HALOFieldModel::find($fieldId);
		if(is_null($field)){
			$field = new HALOFieldModel();
		}
		
		//validate data
		$validator = $field->bindData($postData)->validate();
		if($validator->fails()){			
			HALOResponse::addMessage($validator->messages());
		} else {
			$field->save();
			//also update the group code
			$field->fieldcode = $field->getFieldCode();
			$field->save();
			HALOResponse::refresh();
		}
				
		return HALOResponse::sendResponse();

	}
	
	public function ajaxDeleteField($fieldIds){
		if(!is_array($fieldIds)){
			$fieldIds = array($fieldIds);
		}
		//loop on each field to delete
		
		HALOFieldModel::destroy($fieldIds);
		HALOResponse::addScriptCall('halo.popup.setMessage', __halontext('Field was deleted', 'Fields were deleted', count($fieldIds)) , 'warning', true);
		HALOResponse::addScriptCall('halo.popup.resetFormAction');
		HALOResponse::addScriptCall('halo.popup.addFormAction', '{"name": "Done","onclick": "halo.util.reload()","href": "javascript:void(0);"}');
				
		return HALOResponse::sendResponse();
		
	}
		
}
